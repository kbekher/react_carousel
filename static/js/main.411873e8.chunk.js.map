{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","useState","offset","setOffset","useEffect","maxOffset","length","className","style","width","transform","transitionDuration","map","image","i","src","alt","type","onClick","currentOffset","Math","min","disabled","max","useInput","initialValue","value","setValue","onChange","e","target","App","htmlFor","name","id","ReactDOM","render","document","getElementById"],"mappings":"gOAuFeA,EA5EmB,SAAC,GAM5B,IALLC,EAKI,EALJA,OACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,UACAC,EACI,EADJA,kBAEA,EAA4BC,mBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,kBAAMD,EAAU,KAAI,CAACJ,IAE/B,IAAMM,EAAYT,EAAOU,OAASP,EAAaD,EAAYC,EAc3D,OACE,sBAAKQ,UAAU,WAAf,UACE,qBACEA,UAAU,oBACVC,MAAO,CAAEC,MAAM,GAAD,OAAKV,EAAYD,EAAjB,OAFhB,SAKE,oBACES,UAAU,iBACVC,MAAO,CACLE,UAAU,cAAD,OAAgBR,EAAhB,OACTS,mBAAmB,GAAD,OAAKX,EAAL,OAJtB,SAOGJ,EAAOgB,KAAI,SAACC,EAAOC,GAAR,OACV,6BACE,qBACEC,IAAKF,EACLG,IAAG,gBAAWF,EAAI,GAClBL,MAAOV,KAJFc,UAWf,sBACEN,UAAU,oBACVC,MAAO,CAAEC,MAAM,GAAD,OAAKV,EAAYD,EAAjB,OAFhB,UAIE,wBACEmB,KAAK,SACLC,QA5Cc,WACpBf,GAAW,SAAAgB,GAAa,OACtBC,KAAKC,IAAIF,EAAgBpB,EAAYF,EAAM,OA2CvCyB,SAAqB,IAAXpB,EAHZ,SAKE,mBAAGK,UAAU,6BAEf,wBACEU,KAAK,SACLC,QA7Cc,WACpBf,GAAW,SAAAgB,GAAa,OACtBC,KAAKG,IAAIJ,EAAgBpB,EAAYF,GAAOQ,OA4CxCiB,SAAUpB,KAAYG,EACtB,UAAQ,OAJV,SAME,mBAAGE,UAAU,qCC3EjBX,EAAS,CACb,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,gBAIF,SAAS4B,EAASC,GAChB,MAA0BxB,mBAASwB,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAMA,MAAO,CACLD,QACAE,SANF,SAAsBC,GACpBF,GAAUE,EAAEC,OAAOJ,SASvB,IA2EeK,EA3EO,WACpB,IAAMhC,EAAYyB,EAAS,KACrB1B,EAAY0B,EAAS,GACrB3B,EAAO2B,EAAS,GAChBxB,EAAoBwB,EAAS,KAEnC,OACE,sBAAKjB,UAAU,MAAf,UAEE,qBAAI,UAAQ,QAAZ,2BAAmCX,EAAOU,OAA1C,aAEA,cAAC,EAAD,CACEV,OAAQA,EACRC,KAAMA,EAAK6B,MACX5B,UAAWA,EAAU4B,MACrB3B,UAAWA,EAAU2B,MACrB1B,kBAAmBA,EAAkB0B,QAGvC,sBAAKnB,UAAU,gBAAf,UACE,wBAAOyB,QAAQ,SAAf,6BAEE,iDACMjC,GADN,IAEEkB,KAAK,SACLgB,KAAK,YACLC,GAAG,SACH3B,UAAU,eACVc,IAAK,GACLE,IAAK,UAIT,wBAAOS,QAAQ,UAAf,6BAEE,iDACMlC,GADN,IAEEmB,KAAK,SACLgB,KAAK,YACLC,GAAG,UACH3B,UAAU,eACVc,IAAK,EACLE,IAAK3B,EAAOU,aAIhB,wBAAO0B,QAAQ,SAAf,uBAEE,iDACMnC,GADN,IAEEoB,KAAK,SACLgB,KAAK,OACLC,GAAG,SACH3B,UAAU,eACVc,IAAK,EACLE,IAAK3B,EAAOU,OAAS,QAIzB,wBAAO0B,QAAQ,cAAf,qCAEE,iDACMhC,GADN,IAEEiB,KAAK,SACLgB,KAAK,oBACLC,GAAG,cACH3B,UAAU,eACVc,IAAK,eC/FjBc,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.411873e8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n}) => {\n  const [offset, setOffset] = useState(0);\n\n  useEffect(() => setOffset(0), [itemWidth]);\n\n  const maxOffset = images.length * itemWidth - (frameSize * itemWidth);\n\n  const showPrevImage = () => {\n    setOffset((currentOffset => (\n      Math.min(currentOffset + itemWidth * step, 0)\n    )));\n  };\n\n  const showNextImage = () => {\n    setOffset((currentOffset => (\n      Math.max(currentOffset - itemWidth * step, -maxOffset)\n    )));\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <div\n        className=\"Carousel__wrapper\"\n        style={{ width: `${itemWidth * frameSize}px` }}\n      >\n\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transform: `translateX(${offset}px)`,\n            transitionDuration: `${animationDuration}ms`,\n          }}\n        >\n          {images.map((image, i) => (\n            <li key={image}>\n              <img\n                src={image}\n                alt={`smile ${i + 1}`}\n                width={itemWidth}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div\n        className=\"Carousel__buttons\"\n        style={{ width: `${itemWidth * frameSize}px` }}\n      >\n        <button\n          type=\"button\"\n          onClick={showPrevImage}\n          disabled={offset === 0}\n        >\n          <i className=\"fa-solid fa-arrow-left\" />\n        </button>\n        <button\n          type=\"button\"\n          onClick={showNextImage}\n          disabled={offset === -maxOffset}\n          data-cy=\"next\"\n        >\n          <i className=\"fa-solid fa-arrow-right\" />\n        </button>\n      </div>\n\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\nconst images = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\n// tried to create a custom hook in order to avoid repeating onChange handlers\nfunction useInput(initialValue: number) {\n  const [value, setValue] = useState(initialValue);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setValue(+e.target.value);\n  }\n\n  return {\n    value,\n    onChange: handleChange,\n  };\n}\n\nconst App: React.FC = () => {\n  const itemWidth = useInput(130);\n  const frameSize = useInput(3);\n  const step = useInput(3);\n  const animationDuration = useInput(1000);\n\n  return (\n    <div className=\"App\">\n      {/* eslint-disable-next-line */}\n      <h1 data-cy='title'>Carousel with {images.length} images</h1>\n\n      <Carousel\n        images={images}\n        step={step.value}\n        frameSize={frameSize.value}\n        itemWidth={itemWidth.value}\n        animationDuration={animationDuration.value}\n      />\n\n      <div className=\"App__settings\">\n        <label htmlFor=\"itemId\">\n          Enter item width\n          <input\n            {...itemWidth}\n            type=\"number\"\n            name=\"itemWidth\"\n            id=\"itemId\"\n            className=\"App__setting\"\n            min={50}\n            max={350}\n          />\n        </label>\n\n        <label htmlFor=\"frameId\">\n          Enter frame size\n          <input\n            {...frameSize}\n            type=\"number\"\n            name=\"frameSize\"\n            id=\"frameId\"\n            className=\"App__setting\"\n            min={1}\n            max={images.length}\n          />\n        </label>\n\n        <label htmlFor=\"stepId\">\n          Enter step\n          <input\n            {...step}\n            type=\"number\"\n            name=\"step\"\n            id=\"stepId\"\n            className=\"App__setting\"\n            min={1}\n            max={images.length - 1}\n          />\n        </label>\n\n        <label htmlFor=\"animationId\">\n          Enter animation duration\n          <input\n            {...animationDuration}\n            type=\"number\"\n            name=\"animationDuration\"\n            id=\"animationId\"\n            className=\"App__setting\"\n            min={0}\n          />\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}